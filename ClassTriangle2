class InvalidTriangle(Exception):
    pass

class Triangle:
    def __init__(self, side_1, side_2, side_3):
        self.side_1 = side_1
        self.side_2 = side_2
        self.side_3 = side_3
        if not self.is_valid():
            raise InvalidTriangle

    def area(self):
        p = (self.side_1 + self.side_2 + self.side_3) / 2
        return round((p*(p - self.side_1) * (p - self.side_2) * (p - self.side_3))**0.5, 2)

    def perimeter(self):
        return round(self.side_1 + self.side_2 + self.side_3, 2)

    def show(self):
        return self.side_1, self.side_2, self.side_3

    def is_valid(self):
        if not isinstance(self.side_1, (float, int)):
            return False
            
        if not isinstance(self.side_2, (float, int)):
            return False
            
        if not isinstance(self.side_3, (float, int)):
            return False

        if self.side_1 + self.side_2 > self.side_3 and \
            self.side_2 + self.side_3 > self.side_1 and \
            self.side_1 + self.side_3 > self.side_2 and \
            self.side_1 > 0 and self.side_2 > 0 and self.side_3 > 0:
            return True

triangle = Triangle(2, 5, 6)
print('Sides:', triangle.show(),
      '\nPerimeter:', triangle.perimeter(),
      '\nArea:', triangle.area())

